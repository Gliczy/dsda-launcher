# This is a basic workflow to help you get started with Actions

name: CI

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-windows:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      #- name: Install qt static
      #  run: |
      #    qt-windows-static-build.ps1
      #    choco uninstall mingw --force
      #    choco uninstall strawberryperl --force
      #- uses: numworks/setup-msys2@v1
      #  with:
      #    msystem: MINGW32
      #C:\Qt\5.15.2\mingw81_64\bin\qmake.exe ..
      
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          version: '6.2.0'
          host: 'windows'
          target: 'desktop'
          arch: 'win64_mingw81'
          setup-python: 'false'
          
          
      #- name: Install Qt5/Qt6 (yaqti)
      #  uses: WillBrennan/yaqti@2021.07.29
      #  with:
      #    # Qt version to pick 5.15.2 or 6.2.1
      #    version: '6.2.0'
      #    os: 'windows'
      #    platform: 'desktop'
      #    modules: 'qtcharts'
      #- name: Set up Python 3.x
      #  uses: actions/setup-python@v2
      #  with:
      #    python-version: 3.x
      #- name: Install qt
      #  run: | 
      #    pip install yaqti &&
      #    python -m yaqti install --version 6.2.0 --platform desktop --os windows --modules qtcharts
      #- name: install qt static
      #  run: |
      #    git clone git://code.qt.io/qt/qt5.git
      #    cd qt5
      #    git checkout 6.0
      #    perl init-repository
      #    cd ..
      #    mkdir qt6-build
      #    cd qt6-build
      #    ..\qt5\configure.bat -prefix C:\path\to\install
      #    cmake --build . 
      #    cmake --install .
      - name: tree
        run: |
          where make.exe
          cd \
          tree /F
      - name: build
        run: |
          cd dsda-launcher
          mkdir build
          cd build
          qmake.exe ..
          make.exe
          tree /F
          mkdir lib
          windeployqt.exe release\dsda-launcher.exe
          Compress-Archive -path .\release\* -destination .\windows.zip
          dir
      - uses: actions/upload-artifact@v2
        with:
          name: mwindows
          path: dsda-launcher\build\win.zip
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          aqtversion: '==2.1.*'
          version: '6.2.0'
          host: 'linux'
          target: 'desktop'
          arch: 'gcc_64'
          tools: 'tools_openssl_x64'
          
      - name: build
        run: |
          cd dsda-launcher
          mkdir build
          cd build
          qmake ..
          make
          ls
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage ./dsda-launcher -unsupported-allow-new-glibc
          zip -r ../linux.zip .
          ls
      - uses: actions/upload-artifact@v2
        with:
          name: linux
          path: dsda-launcher/linux.zip
    


